cmake_minimum_required(VERSION 2.8)

# find compiler paths
find_path(COMPILER_PATH cl.exe)
set (CMAKE_CXX_COMPILER ${COMPILER_PATH})
set (CMAKE_C_COMPILER ${COMPILER_PATH})
include("cmakeSupportFunctions/CMakeLists.txt")	# some useful cmake functions


if (CMAKE_BUILD_TYPE MATCHES Debug)
  message("Debug build.")
elseif (CMAKE_BUILD_TYPE MATCHES Release)
  message("Release build.")
else ()
  message("Some other build type.")
ENDIF()
# OpenCV
#include_directories(
#		"${OPENCV_DEBUG}/build/include";	
#)
includePath("${OPENCV_DEBUG}/opencv/include")
#find_file(PTHREAD_PATH )

# Defines
add_definitions(-DWIN32)
set(CMAKE_SUPPRESS_REGENERATION TRUE)

if (NOT "${CPP11}" STREQUAL "")  #ie if it has been defined (either true or false)
  add_definitions(-DCPP11=${CPP11})
  MESSAGE("Adding compiler flag CPP11='${CPP11}'")
else()
  MESSAGE("Compiler flag CPP11 not set")
endif()


# Parse common
addProject("Pthread")



SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE} CACHE STRING "" FORCE)
project(PTHREAD_SAMPLE)		# This is the name VS will use for the solution comprising all projects
